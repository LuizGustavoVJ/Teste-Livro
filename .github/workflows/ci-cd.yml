name: Sistema de Livros - CI/CD Completo

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  notificar_pr_criado:
    name: Notificar Novo Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: Notificar PR Criado para Aprova√ß√£o
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prAuthor = context.payload.pull_request.user.login;
          const prUrl = context.payload.pull_request.html_url;

          // Criar issue para notifica√ß√£o (aparece no app m√≥vel)
          await github.rest.issues.create({
            owner,
            repo,
            title: `üîî PR #${prNumber} aguardando aprova√ß√£o`,
            body: `**NOVO PULL REQUEST PARA APROVA√á√ÉO**\n\n**T√≠tulo:** ${prTitle}\n**Autor:** @${prAuthor}\n**Link:** ${prUrl}\n\n@LuizGustavoVJ, este PR est√° aguardando sua revis√£o e aprova√ß√£o.\n\n**A√ß√µes necess√°rias:**\n- [ ] Revisar c√≥digo\n- [ ] Testar funcionalidades\n- [ ] Aprovar ou solicitar altera√ß√µes\n\n*Esta issue ser√° fechada automaticamente quando o PR for mergeado.*`,
            labels: ['pr-review-needed', 'high-priority'],
            assignees: ['LuizGustavoVJ']
          });

  validacao_inicial:
    name: Valida√ß√£o Inicial do C√≥digo
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd
        coverage: xdebug

    - name: Validar Sintaxe PHP
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

    - name: Cache das Depend√™ncias do Composer
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.lock') }}

    - name: Instalar Depend√™ncias do Composer
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Verificar Configura√ß√£o Laravel
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan config:clear
        php artisan config:cache

  testes_unitarios:
    name: Testes Unit√°rios
    runs-on: ubuntu-latest
    needs: validacao_inicial

    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd
        coverage: xdebug

    - name: Cache das Depend√™ncias
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.lock') }}

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Preparar Ambiente de Teste
      run: |
        cp .env.example .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=:memory:/' .env
        php artisan key:generate
        php artisan config:cache

    - name: Executar Testes Unit√°rios
      run: |
        php artisan test --testsuite=Unit --coverage-text --coverage-clover=coverage.xml

    - name: Upload da Cobertura de C√≥digo
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  testes_integracao:
    name: Testes de Integra√ß√£o
    runs-on: ubuntu-latest
    needs: validacao_inicial

    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Preparar Ambiente
      run: |
        cp .env.example .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=:memory:/' .env
        php artisan key:generate
        php artisan migrate --force
        php artisan db:seed --force

    - name: Executar Testes de Integra√ß√£o
      run: php artisan test --testsuite=Feature

  analise_qualidade:
    name: An√°lise de Qualidade
    runs-on: ubuntu-latest
    needs: validacao_inicial

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Instalar Ferramentas de An√°lise
      run: |
        composer require --dev friendsofphp/php-cs-fixer
        composer require --dev phpstan/phpstan
        composer require --dev squizlabs/php_codesniffer

    - name: Executar PHP CS Fixer
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

    - name: Executar PHP CodeSniffer
      run: ./vendor/bin/phpcs --standard=PSR12 app/

    - name: Executar PHPStan
      run: ./vendor/bin/phpstan analyse app --level=5

  testes_seguranca:
    name: Testes de Seguran√ßa
    runs-on: ubuntu-latest
    needs: validacao_inicial

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Verificar Vulnerabilidades de Seguran√ßa
      run: |
        composer audit
        php artisan route:list --json | jq '.[] | select(.middleware | contains(["auth"]) | not) | .uri' || true

  deploy_staging:
    name: Deploy para Staging
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_qualidade, testes_seguranca]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd

    - name: Instalar Depend√™ncias de Produ√ß√£o
      run: composer install --no-dev --optimize-autoloader

    - name: Otimizar para Produ√ß√£o
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Notificar Deploy Realizado
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;

          await github.rest.repos.createCommitComment({
            owner,
            repo,
            commit_sha: context.sha,
            body: `üöÄ **DEPLOY PARA STAGING REALIZADO**\n\n‚úÖ Sistema atualizado com sucesso\nüì¶ Commit: ${context.sha.substring(0, 7)}\nüåø Branch: ${context.ref.replace('refs/heads/', '')}\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\n\n**Pr√≥ximos passos:**\n- Testar funcionalidades em staging\n- Validar performance\n- Aprovar para produ√ß√£o`
          });

  notificar_pr_aprovado:
    name: Notificar PR Aprovado
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Fechar Issues de Notifica√ß√£o de PR
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;

          // Buscar issues abertas com label 'pr-review-needed'
          const issues = await github.rest.issues.listForRepo({
            owner,
            repo,
            state: 'open',
            labels: 'pr-review-needed'
          });

          // Fechar issues relacionadas a PRs
          for (const issue of issues.data) {
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issue.number,
              state: 'closed'
            });

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: issue.number,
              body: `‚úÖ **PR APROVADO E MERGEADO**\n\nO Pull Request foi aprovado e as altera√ß√µes foram integradas √† branch master.\n\n*Issue fechada automaticamente.*`
            });
          }

  notificar_sucesso:
    name: Notificar Sucesso Completo
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_qualidade, testes_seguranca]
    if: success()

    steps:
    - name: Notificar Pipeline Conclu√≠do
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;

          await github.rest.repos.createCommitComment({
            owner,
            repo,
            commit_sha: context.sha,
            body: `‚úÖ **PIPELINE CI/CD CONCLU√çDO COM SUCESSO**\n\nüß™ **Testes unit√°rios:** ‚úÖ Passou\nüîó **Testes de integra√ß√£o:** ‚úÖ Passou\nüîç **An√°lise de qualidade:** ‚úÖ Passou\nüõ°Ô∏è **Testes de seguran√ßa:** ‚úÖ Passou\n\nüìä **Estat√≠sticas:**\n- Commit: ${context.sha.substring(0, 7)}\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Hor√°rio: ${new Date().toLocaleString('pt-BR')}\n\nüöÄ **O c√≥digo est√° pronto para produ√ß√£o!**`
          });

  notificar_falha:
    name: Notificar Falha do Pipeline
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_qualidade, testes_seguranca]
    if: failure()

    steps:
    - name: Criar Issue para Falha
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;

          // Criar issue para notificar falha
          await github.rest.issues.create({
            owner,
            repo,
            title: `‚ùå Pipeline CI/CD falhou - ${context.sha.substring(0, 7)}`,
            body: `**PIPELINE CI/CD FALHOU**\n\n‚ùå Algum dos testes ou verifica√ß√µes falhou.\n\n**Detalhes:**\n- Commit: ${context.sha.substring(0, 7)}\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Workflow: ${context.workflow}\n- Run ID: ${context.runId}\n\n**A√ß√µes necess√°rias:**\n- [ ] Verificar logs do GitHub Actions\n- [ ] Corrigir problemas identificados\n- [ ] Fazer novo commit com corre√ß√µes\n\n**Link para logs:** https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
            labels: ['bug', 'ci-cd-failure', 'high-priority'],
            assignees: ['LuizGustavoVJ']
          });

          await github.rest.repos.createCommitComment({
            owner,
            repo,
            commit_sha: context.sha,
            body: `‚ùå **PIPELINE CI/CD FALHOU**\n\nUma issue foi criada para rastrear esta falha. Verifique os logs para mais detalhes.\n\n**Run ID:** ${context.runId}`
          });

