name: Sistema de Livros - CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  notificar_pr:
    name: Notificar Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Notificar PR Criado
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prAuthor = context.payload.pull_request.user.login;
          
          // Criar issue para notificar o propriet√°rio
          await github.rest.issues.create({
            owner,
            repo,
            title: `üîî PR #${prNumber} aguardando aprova√ß√£o`,
            body: `**NOVO PULL REQUEST PARA APROVA√á√ÉO**\n\n**PR #${prNumber}:** ${prTitle}\n**Autor:** @${prAuthor}\n**Link:** https://github.com/${owner}/${repo}/pull/${prNumber}\n\n@LuizGustavoVJ, este PR est√° aguardando sua revis√£o e aprova√ß√£o.\n\n**A√ß√µes necess√°rias:**\n- [ ] Revisar c√≥digo\n- [ ] Testar funcionalidades\n- [ ] Aprovar ou solicitar mudan√ßas`,
            labels: ['pr-review', 'awaiting-approval']
          });

  testes_unitarios:
    name: Executar Testes Unit√°rios
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd
        coverage: xdebug

    - name: Cache das Depend√™ncias do Composer
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.lock') }}

    - name: Instalar Depend√™ncias do Composer
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Preparar Ambiente Laravel
      run: |
        cp .env.example .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=database\/database.sqlite/' .env
        sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=localhost/' .env
        sed -i 's/CACHE_DRIVER=file/CACHE_DRIVER=redis/' .env
        sed -i 's/QUEUE_CONNECTION=sync/QUEUE_CONNECTION=redis/' .env
        php artisan key:generate

    - name: Configurar Banco de Dados de Teste
      run: |
        touch database/database.sqlite
        php artisan migrate --force
        php artisan db:seed --force

    - name: Executar Testes Unit√°rios
      run: |
        php artisan test --testsuite=Unit --coverage-text --coverage-clover=coverage.xml

    - name: Upload da Cobertura de C√≥digo
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  testes_integracao:
    name: Executar Testes de Integra√ß√£o
    runs-on: ubuntu-latest
    needs: testes_unitarios
    
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379

    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Preparar Ambiente
      run: |
        cp .env.example .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=database\/database.sqlite/' .env
        sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=localhost/' .env
        sed -i 's/CACHE_DRIVER=file/CACHE_DRIVER=redis/' .env
        sed -i 's/QUEUE_CONNECTION=sync/QUEUE_CONNECTION=redis/' .env
        php artisan key:generate
        touch database/database.sqlite
        php artisan migrate --force
        php artisan db:seed --force

    - name: Executar Testes de Integra√ß√£o
      run: php artisan test --testsuite=Feature

  analise_codigo:
    name: An√°lise de Qualidade do C√≥digo
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl

    - name: Instalar Depend√™ncias
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Verificar Sintaxe PHP
      run: find app -name "*.php" -exec php -l {} \;

    - name: Executar PHP CS Fixer (Verifica√ß√£o)
      run: |
        composer require --dev friendsofphp/php-cs-fixer
        ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
      continue-on-error: true

    - name: Executar PHPStan (An√°lise Est√°tica)
      run: |
        composer require --dev phpstan/phpstan
        ./vendor/bin/phpstan analyse app --level=3 --no-progress
      continue-on-error: true

  deploy_staging:
    name: Deploy para Staging
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_codigo]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout do C√≥digo
      uses: actions/checkout@v4

    - name: Configurar PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, redis, gd

    - name: Instalar Depend√™ncias
      run: composer install --no-dev --optimize-autoloader

    - name: Preparar para Deploy
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Notificar Deploy Realizado
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `üöÄ Deploy realizado - ${context.sha.substring(0, 7)}`,
            body: `**DEPLOY REALIZADO COM SUCESSO**\n\nO sistema foi atualizado em staging com as √∫ltimas altera√ß√µes.\n\n**Commit:** ${context.sha.substring(0, 7)}\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Timestamp:** ${new Date().toISOString()}\n\n@LuizGustavoVJ, o sistema est√° atualizado e pronto para testes.`,
            labels: ['deployment', 'staging']
          });

  notificar_sucesso:
    name: Notificar Sucesso do Pipeline
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_codigo]
    if: success()
    
    steps:
    - name: Notificar Pipeline Conclu√≠do
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          
          await github.rest.repos.createCommitComment({
            owner,
            repo,
            commit_sha: context.sha,
            body: `‚úÖ **PIPELINE CI/CD CONCLU√çDO COM SUCESSO**\n\nüß™ Testes unit√°rios: ‚úÖ Passou\nüîó Testes de integra√ß√£o: ‚úÖ Passou\nüîç An√°lise de c√≥digo: ‚úÖ Passou\n\nO c√≥digo est√° pronto para produ√ß√£o!\n\n**Estat√≠sticas:**\n- Commit: ${context.sha.substring(0, 7)}\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Timestamp: ${new Date().toISOString()}`
          });

  notificar_falha:
    name: Notificar Falha do Pipeline
    runs-on: ubuntu-latest
    needs: [testes_unitarios, testes_integracao, analise_codigo]
    if: failure()
    
    steps:
    - name: Notificar Pipeline Falhou
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `‚ùå Pipeline falhou - ${context.sha.substring(0, 7)}`,
            body: `**PIPELINE CI/CD FALHOU**\n\nAlgum dos testes ou verifica√ß√µes falhou. Por favor, verifique os logs do GitHub Actions para mais detalhes.\n\n**Commit:** ${context.sha.substring(0, 7)}\n**Branch:** ${context.ref.replace('refs/heads/', '')}\n**Timestamp:** ${new Date().toISOString()}\n\n**Link para logs:** https://github.com/${owner}/${repo}/actions\n\n@LuizGustavoVJ, a√ß√£o necess√°ria para corrigir os problemas.`,
            labels: ['ci-failure', 'bug']
          });

